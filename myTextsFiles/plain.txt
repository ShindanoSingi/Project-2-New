User Management System

The app will have a user and super user/administrator.
The user will be able to register/add and account.
The administrator will have the control over the app; that is, he or she will be able to 
update the status and delete the user. All users will be displayed on browser.

Handlebars will be used to build templetes that do server-side rendering

If time allows, I would like to let users post images and chat with friends

## Wireframes with basic page layout




## Models including field names and their datatypes

const superUserSchema = new mongoose.Schema(
    {
        firstName: {
            type: String,
            required: true
        },
        middleName: {
            type: String,
            required: false
        },
        lastName: {
            type: String,
            required: true
        },
        gender: {
            type: String,
            required: true
        },
        email: {
            type: String
            required: true
        },
        password: {
            type: String,
            required: true
        }
        status: {
            type: String,
            default: Active
        }
    }

);

const UserSchema = new mongoose.Schema(
    {
        firstName: {
            type: String,
            required: true
        },
        middleName: {
            type: String,
            required: false
        },
        lastName: {
            type: String,
            required: true
        },
        gender: {
            type: String,
            required: true
        },
        countryOfBirth: {
            type: String,
            required: true
        },
        email: {
            type: String
            required: true
        },
        password: {
            type: String,
            required: true
        }
        status: {
            type: String,
            default: Active
        }
    }

);







// List of API_KEYs

AIzaSyC1A6vlnO5Ot4gYMSsM3gZbUoF5SMuOc3Y








require('dotenv').config()
const express = require("express");
const axios = require('axios')

// mongodb user model
const User = require("../models/users-model");

// mongodb userVerification model
const UserVerification = require("../models/userVerification-model");

let userTitle = '';

// Define a router
const router = express.Router();

// Render all data form database to the browser "index"
router.get("/", (req, res) => {
    User.find({})
        .then((userData) => res.render('adminPage', { userData }));
});

// Update the user's account by sending him/her sending showing a fail message, and redirecting him/her to the home page.
router.get('/:id/activation/:data', (req, res) => {
    // console.log(req.body)
    // console.log(req.params)

    let newStatus = req.params.data === "Active" ? true : false

    User.findOneAndUpdate({ _id: req.params.id }, { status: newStatus }, { new: true })

        .then(user => {

            let userStatus = user.status;
            console.log(`The user's status is ${userStatus}`)

            if (userStatus === 'false') {
                // Send a de-activation message to the signInPage, so when the tries to sign in, he/she will she the message
                let deActivationMessage = 'Account de-activated';
                console.log(deActivationMessage)
                res.render('signInPage', { deActivation: deActivationMessage })
            }

            else {
                res.redirect('/homePage')
            }
        })
})

// Add a user to the database, then go to the home screen
router.post("/signUp", (req, res) => {

    // Create a user object
    // let userObject = { firstName, middleName, lastName, gender, email, password } = req.body;

    // Remove/trim extra spaces
    // let userFirstName = userObject.firstName.trim()
    // let userMiddleName = userObject.middleName.trim()
    // let userLastName = userObject.lastName.trim()
    // let userGender = userObject.gender.trim()
    // let userEmail = userObject.email.trim()
    // let userPassword = userObject.password.trim()

    // Set mpler
    if ((userFirstName === "") || userLastName)

        User.create(req.body)

            .then(() => res.redirect('/homePage'));
});

router.get('/signUp', (req, res) => {
    res.render('signUpPage')
})

router.get('/homePage', (req, res) => {
    res.render('homePage')
})

// When "Already signed in?" link is clicked, redirect to "sign in" page 
router.get('/signIn', (req, res) => {
    res.render('signInPage');
})

// Sign in page; if the email and password match the account in the database, redirect to songs library app
router.post("/signIn", (req, res) => {
    User.find({ email: req.body.email })
        .then((userData) => {
            // console.log(req.body)
            // console.log(userData)

            let url = `https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=500&q=${userTitle.title}&key=${process.env.API_KEY}`

            if (userData[0].password === req.body.password) {

                axios.get(url)
                    .then((data) => {
                        res.render('songsLibPage', { searchedTitle: data.data.items, userData: userData[0] });
                    })
            }
            else {
                res.redirect('signIn')
            }

        });
});

// Update the user in the database, then go to the home screen
router.put("/:id", (req, res) => {
    User.findOneAndUpdate({ _id: req.params.id }, req.body)
        .then((userData) =>
            res.redirect('/')
        );
});

// Find the user in the database by id in the edit screen/window, shows that info. on edit page
router.get('/:id/edit', (req, res) => {
    console.log(req.params.id)
    User.findById(req.params.id)
        .then(userData => {
            console.log(req.params.id)
            res.render('editPage', { userData })
        })
})

// Delete a user from database, then go to the home screen
router.delete("/:id", (req, res) => {
    User.findOneAndRemove({ _id: req.params.id }).then((userData) =>
        res.redirect('/')
    );
});

// The code below is for songs API and User interaction with the API
// Sign in page; if the email and password match the account in the database, redirect to songs library app
// The "/songsLib" is what I specified in the action in the form in the ejs file
// The "res.render('songsLibPage');" is where the information will be sent to.
// This code is responsible of capturing searched information in the input box from songsLibPage
router.post("/songsLib", (req, res) => {
    userTitle = req.body
    // console.log(userTitle.title)
    //res.render('songsLibPage', { searchedTitle: userTitle.title });

    // The url is loaded with the user's searched word, and ready to be used by Axios
    let url = `https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=500&q=${userTitle.title}&key=${process.env.API_KEY}`

    axios.get(url)
        .then((data) => {
            console.log(data.data.items[0].snippet)
            // console.log(data.data.items[0].snippet.thumbnails.default.url)
            res.render('songsLibPage', { searchedTitle: data.data.items });
        })
});

// The code below redirect the user to the update page when he/she clicks on forgot email or password
router.put("/update/:id", (req, res) => {

    User.findOneAndUpdate({ _id: req.params.id }, req.body)
        .then((userData) => res.redirect('/signIn')
        );
});

// The code below renders the forget page to let the user update the email or password
// When "forgot emai or password?" link is clicked, redirect to "forgotPage" page 
router.get('/forgetPage', (req, res) => {
    res.render('forgetPage');
})

// Update the user's email or password in the database, then go to the sign in page
router.put("/update/:id", (req, res) => {
    User.findOneAndUpdate({ _id: req.params.id }, req.body)
        .then((password) => res.redirect('signIn')
        );
});


module.exports = router;



// Update the user's account by showing a fail message, and redirecting him/her to the home page.
router.get('/:id/activation/:data', (req, res) => {
    // console.log(req.body)
    // console.log(req.params)

    let newStatus = req.params.data === "Active" ? true : false

    console.log(req.params.data)

    User.findOneAndUpdate({ _id: req.params.id }, { $set: { status: newStatus } })

        .then(user => {
            let userStatus = user.status;

            console.log(`The user's status is ${userStatus}`)

            if (newStatus === 'false') {
                // Send a de-activation message to the signInPage, so when the tries to sign in, he/she will she the message
                let deActivationMessage = 'Account de-activated';
                console.log(deActivationMessage)
                res.render('signInPage', { de_activation: deActivationMessage })
            }

            else {
                res.redirect('homePage')
            }
        })
})





            <!-- Formatting status -->

            <script defer>
              function makeReq(e) {
                
                // console.log(e)

                const data = e
                const url = `http://localhost:4000/<%=user.id%>/activation/${data}`

                fetch(url)
                  .then((res) => {
                    return res.json()
                  })
              }
            </script>

            <td>
              <select name="status" id="status" class="font accounts" onchange="makeReq(this.value)">
                <option class="option">Active</option>
                <option class="option">Inactive</option>
              </select>
            </td>





User Management System


STRETCH GOALS:

add play lists, display more data (number of views...), figure out how to find a parmanent key, add intellicense to the search box, make the search icon work, remove links


AIzaSyB1g2XrkVWlXCZySjdoGaOhCAqzDNd3V2s

AIzaSyDn3Tk8oIcTDjHzcdW9Zlz82saHoAQWEa0
AIzaSyDHg7Ik-cFjDt-zI9qjhdEazRohN4I2dmo


* Challenges: Wiring multiple folders was challenging;      working with Ejs,      get data from yotube API, for I have to provide a key that have a few number of to quote/token.    Styling all my 
* I proud of completing this project. something that I thought I could not do. 